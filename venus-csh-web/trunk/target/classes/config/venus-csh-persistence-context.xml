<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/data/mongo 
	   http://www.springframework.org/schema/data/mongo/spring-mongo.xsd
	   http://www.springframework.org/schema/aop   
       http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	   http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">
		
		
	<!-- MyBatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:/config/venus-csh-mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath*:mapper/*Mapper.xml"/>
    </bean>
    <!-- 事务管理器配置, 使用jdbc事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 配置通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 配置事务传播特性 -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="get*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- AOP -->
	<aop:config>
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(* cn.com.mx.*.controller.*(..))" />
	</aop:config>
    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
		
	<!-- MySQL数据源配置, 使用应用中的DBCP数据库连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <!-- Connection Info -->
        <property name="driverClassName" value="#{app.jdbcDriver}"/>
        <property name="url" value="#{app.jdbcUrl}"/>
        <property name="username" value="#{app.jdbcUsername}"/>
        <property name="password" value="#{app.jdbcPassword}"/>
        <!-- Connection Pooling Info -->
        <property name="maxActive" value="#{app.dbcpMaxActive}"/>
        <property name="maxIdle" value="#{app.dbcpMaxIdle}"/>
        <property name="defaultAutoCommit" value="true"/> <!-- 读写分离 -->
        <property name="initialSize" value="3"/>
        <!-- 连接Idle 30分钟后超时,每10分钟检查一次 -->
        <property name="timeBetweenEvictionRunsMillis" value="600000"/>
        <property name="minEvictableIdleTimeMillis" value="1800000"/>
    </bean>	
		
	<!-- |||||MongoDB配置||||| -->	
	<mongo:mongo-client replica-set="#{app.mongodbReplica}">
		<mongo:client-options write-concern="NORMAL" />
	</mongo:mongo-client>
	<!-- mongo模板类实例 -->
	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg ref="mongo" />
		<constructor-arg name="databaseName" value="#{app.mongodbName}" />
	</bean>		
		
	<!-- |||||redis单点配置||||| -->	
	<!-- 缺省配置 -->
	<beans profile="default">	
		<!--redis连接池配置 -->
		<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
			<property name="maxTotal" value="#{app.redisMaxTotal}" /><!-- 最大连接数 -->
			<property name="maxIdle" value="#{app.redisMaxIdle}" /><!-- 最大空闲连接数 -->
			<property name="maxWaitMillis" value="#{app.redisMaxWaitMillis}" /><!-- 获取连接时的最大等待毫秒数 -->
			<property name="testOnBorrow" value="#{app.redisTestOnBorrow}" /><!-- 获取连接的时候检查有效性 -->
		</bean>
		<!-- redis的连接池实例-->
		<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
			<constructor-arg index="0" ref="jedisPoolConfig" />
			<constructor-arg index="1" value="#{app.redisHost}" />
			<constructor-arg index="2" value="#{app.redisPort}" type="int" />
			<constructor-arg index="3" value="#{app.redisTimeout}" type="int"/>
	      	<constructor-arg index="4" value="#{app.redisPassword}"/>
		</bean>	
		<!-- redis模板实例-->
		<bean id="jedisTemplate" class="com.gomeo2o.common.redis.SimpleJedisTemplate">
			<constructor-arg name="jedisPool" ref="jedisPool"/>
		</bean>	
	</beans>
	
	<!-- |||||redis集群配置||||| -->
	<!--redis连接池配置 -->
	<!-- 集群配置 -->
	<beans profile="cluster">
		<!--redis连接池配置 -->
		<bean name="genericObjectPoolConfig" class="org.apache.commons.pool2.impl.GenericObjectPoolConfig" >
			<property name="maxTotal" value="#{app.redisMaxTotal}" /><!-- 最大连接数 -->
			<property name="maxIdle" value="#{app.redisMaxIdle}" /><!-- 最大空闲连接数 -->
			<property name="maxWaitMillis" value="#{app.redisMaxWaitMillis}" /><!-- 获取连接时的最大等待毫秒数 -->
			<property name="testOnBorrow" value="#{app.redisTestOnBorrow}" /><!-- 获取连接的时候检查有效性 -->
		</bean>	
		<!-- redis集群实例 -->
		<bean id="jedisCluster" class="com.gomeo2o.common.redis.JedisClusterFactory">
			<property name="redisServers" value="#{app.redisServers}"/>
			<property name="redisTimeout" value="#{app.redisTimeout}"/>
			<property name="maxRedirections" value="#{app.redisMaxRedirections}"/>
			<property name="poolConfig" ref="genericObjectPoolConfig"/>
		</bean>
		
		<!-- redis模板实例-->
		<bean id="jedisTemplate" class="com.gomeo2o.common.redis.SimpleJedisTemplate">
			<constructor-arg name="jedisCluster" ref="jedisCluster"/>
		</bean>	
	</beans>
	
</beans>